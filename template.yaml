AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  S3 Event Notification System
  An event-driven architecture that sends email notifications when files are uploaded to S3

Parameters:
  Environment:
    Type: String
    AllowedValues:
      - dev
      - prod
    Description: Environment name (dev or prod)

  EmailSubscriptionParameter:
    Type: String
    Description: Email address to receive S3 upload notifications

  BucketName:
    Type: String
    Description: Name for the S3 bucket (must be globally unique)
    Default: week8lab-bokiti

Globals:
  Function:
    Timeout: 20
    MemorySize: 512


Resources:
  # S3 bucket to store files
  UploadBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${BucketName}-${Environment}"
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: 's3:ObjectCreated:*'
            Function: !GetAtt S3NotificationFunction.Arn
    DependsOn: S3NotificationPermission

  # IAM Role for the Lambda function
  S3NotificationFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: S3ReadPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: !Sub "arn:aws:s3:::${BucketName}-${Environment}/*"
        - PolicyName: SNSPublishPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !Ref NotificationTopic

  # Lambda function to process S3 events
  S3NotificationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: com.giftedlabs.S3UploadHandler::handleRequest
      Runtime: java21
      Architectures:
        - x86_64
      Role: !GetAtt S3NotificationFunctionRole.Arn
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref NotificationTopic
          ENVIRONMENT: !Ref Environment

  # Lambda permission for S3 to invoke function
  S3NotificationPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt S3NotificationFunction.Arn
      Principal: s3.amazonaws.com
      SourceArn: !Sub "arn:aws:s3:::${BucketName}-${Environment}"

  # SNS Topic for email notifications
  NotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub "week8-lab-notifications-${Environment}"
      DisplayName: !Sub "Week8-Lab Notifications (${Environment})"

  # Email subscription to the SNS topic
  EmailSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: email
      TopicArn: !Ref NotificationTopic
      Endpoint: !Ref EmailSubscriptionParameter

Outputs:
  S3NotificationFunction:
    Description: "S3 Notification Lambda Function ARN"
    Value: !GetAtt S3NotificationFunction.Arn

  UploadBucket:
    Description: "S3 bucket for file uploads"
    Value: !Ref UploadBucket

  NotificationTopic:
    Description: "SNS Topic ARN for notifications"
    Value: !Ref NotificationTopic

  Region:
    Description: "Region where resources are deployed"
    Value: !Ref AWS::Region